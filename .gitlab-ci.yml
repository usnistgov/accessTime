stages:
  - build-deps
  - build
  - test
  - test-downstream
  - deploy

variables:
  IMAGE_MCVQOE_BASE: $CI_REGISTRY_IMAGE/mcvqoe-base:$CI_COMMIT_REF_SLUG
  IMAGE_MCVQOE_BASE_RELEASE: $CI_REGISTRY_IMAGE/mcvqoe-base:$CI_COMMIT_REF_SLUG

default:
  image: $IMAGE_MCVQOE_BASE
  tags:
    - docker

build:amrchan:
  stage: build-deps
  trigger:
    project: PSCR/MCV/channel-plugins/amrchan
    strategy: depend

build:docker:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/.dockerfile --destination $IMAGE_MCVQOE_BASE

test-math:
  stage: test
  script:
    - python tests/test_math.py
  artifacts:
    when: always
    paths:
      - math-tests.xml
    reports:
      junit: math-tests.xml


test-log:
  stage: test
  script:
    - python tests/test_log.py

test-sim:
  stage: test
  script:
    - python tests/sim_test.py
  artifacts:
    when: always
    paths:
      - sim-tests.xml
    reports:
      junit: sim-tests.xml

test-testCpy:
  stage: test
  script:
    - python -m pip list > packages.txt
    - python tests/test_testCpy.py
  artifacts:
    when: always
    paths:
      - packages.txt

test-ITS-delay:
  stage: test
  script:
    - python tests/test_ITS_delay.py
  artifacts :
    when: always
    paths:
      - ITS-tests.xml
    reports:
      junit: ITS-tests.xml

test-mouth2ear:
  stage: test-downstream
  trigger:
    project: PSCR/MCV/device-tst
    strategy: depend

release:pypi:
  stage: deploy
  image: python:3.8
  script:
    - pip install twine
    - python setup.py bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi --skip-existing dist/*

release:docker:
  stage: deploy
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane cp $IMAGE_MCVQOE_BASE $IMAGE_MCVQOE_BASE_RELEASE

pages:
  stage: deploy
  script:
    - pip install sphinx numpydoc
    - sphinx-build -b html ./docs/source/ public
  only:
    - develop
    - sphinx
  artifacts:
    paths:
      - public
